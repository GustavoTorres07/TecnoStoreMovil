@page "/login"
@page "/"
@layout TecnoStoreMovil.Components.Layout.LoginLayout
@using TecnoStoreMovil.Services.Contrato
@inject IAuthClient Auth
@inject NavigationManager Nav

<div class="d-flex flex-column min-vh-100">

    <!-- Contenido centrado -->
    <main class="flex-fill d-flex align-items-center justify-content-center">
        <div class="login-wrapper d-flex align-items-center justify-content-center w-100">
            <div class="login-card card shadow-lg border-0">
                <div class="card-body p-4 p-md-5">
                    <div class="text-center mb-4">
                        <img src="img/logo.svg" alt="TecnoStore" width="72" height="72" />
                        <h4 class="mt-3 mb-0 fw-semibold">TecnoStore</h4>
                        <small class="text-muted">Ingresá para continuar</small>
                    </div>

                    <EditForm Model="_vm" OnValidSubmit="SubmitAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-2" />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="_vm.Email" class="form-control" autocomplete="email" />
                        </div>

                        <div class="mb-3 position-relative">
                            <label class="form-label">Contraseña</label>
                            <div class="input-group">
                                <InputText @bind-Value="_vm.Clave" class="form-control" type="@_passwordType" autocomplete="current-password" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePassword" aria-label="Mostrar/Ocultar contraseña">
                                    <i class="bi @(_passwordType == "password" ? "bi-eye" : "bi-eye-slash")"></i>
                                </button>
                            </div>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(_error))
                        {
                            <div class="alert alert-danger py-2" role="alert">
                                <i class="bi bi-exclamation-triangle me-1"></i> @_error
                            </div>
                        }

                        <button class="btn btn-primary w-100" type="submit" disabled="@_loading">
                            @if (_loading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
                            }
                            Ingresar
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="border-top small text-muted py-3 mt-auto">
        <div class="container">
            <div class="row gy-2 align-items-center text-center text-md-start">
                <div class="col-12 col-md-4">
                    <span>© TecnoStore @DateTime.Now.Year</span>
                </div>
                <div class="col-12 col-md-4">
                    <span>TSD - ITES @DateTime.Now.Year</span>
                </div>
                <div class="col-12 col-md-4 text-md-end">
                    <span>Desarrollador - Gustavo Torres</span>
                </div>
            </div>
        </div>
    </footer>
</div>

@code {
    private readonly LoginVm _vm = new();
    private string? _error;
    private bool _loading;
    private string _passwordType = "password";

    private void TogglePassword()
    {
        _passwordType = _passwordType == "password" ? "text" : "password";
    }

    private async Task SubmitAsync()
    {
        _error = null;
        _loading = true;
        try
        {
            var ok = await Auth.LoginAsync(_vm.Email, _vm.Clave);
            if (!ok)
            {
                _error = "Credenciales inválidas o usuario inactivo.";
                return;
            }
            Nav.NavigateTo("/productos", forceLoad: true);
        }
        catch
        {
            _error = "Ocurrió un error al iniciar sesión.";
        }
        finally
        {
            _loading = false;
        }
    }

    private sealed class LoginVm
    {
        public string Email { get; set; } = string.Empty;
        public string Clave { get; set; } = string.Empty;
    }
}
