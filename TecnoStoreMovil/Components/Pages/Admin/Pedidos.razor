@page "/admin/pedidos"
@using TecnoStoreMovil.Services.Contrato
@using TecnoStoreMovil.Shared.DTOs
@inject IAdminPedidosClient AdminPedidos

<div class="container py-3">
    <div class="d-flex align-items-center mb-3">
        <h3 class="me-auto mb-0"><i class="bi bi-receipt-cutoff"></i> Administración · Pedidos</h3>

        <div class="d-flex align-items-center gap-2">
            <select class="form-select" style="min-width:220px" @bind="EstadoFiltro">
                <option value="">Todos</option>
                <option value="Pendiente">Pendiente</option>
                <option value="Aprobado">Aprobado</option>
                <option value="Cancelado">Cancelado</option>
            </select>
            <button class="btn btn-outline-secondary" @onclick="Refrescar">
                <i class="bi bi-arrow-repeat"></i> Refrescar
            </button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_toast))
    {
        <div class="alert alert-success">@_toast</div>
    }
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-danger">@_error</div>
    }

    @if (_loading)
    {
        <div class="alert alert-info">Cargando...</div>
    }
    else if (_items.Count == 0)
    {
        <div class="alert alert-warning">No hay pedidos.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
            @foreach (var p in _items)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-start mb-2">
                                <h5 class="card-title me-2 mb-0">Pedido #@p.Id</h5>
                                <span class="badge @EstadoCss(p.Estado)">@p.Estado</span>
                            </div>
                            <div class="small text-muted mb-1">
                                <i class="bi bi-calendar2"></i> @p.Fecha.ToString("g")
                            </div>
                            <div class="mt-auto d-flex justify-content-between align-items-center">
                                <span class="fw-bold">@p.Total.ToString("C")</span>
                            </div>
                        </div>

                        <div class="card-footer d-flex align-items-center gap-2">
                            <button class="btn btn-sm btn-outline-secondary"
                                    @onclick="() => Ver(p.Id)">
                                <i class="bi bi-eye"></i> Ver
                            </button>

                            <span class="ms-auto"></span>

                            @if (p.Estado == "Pendiente")
                            {
                                <button class="btn btn-sm btn-success"
                                        @onclick="() => Aceptar(p.Id)">
                                    <i class="bi bi-check2-circle"></i> Aceptar
                                </button>

                                <button class="btn btn-sm btn-danger"
                                        @onclick="() => Rechazar(p.Id)">
                                    <i class="bi bi-x-circle"></i> Rechazar
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (_detail is not null)
{
    <div class="modal fade show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-file-earmark-text"></i> Pedido #@_detail!.Id</h5>
                    <button type="button" class="btn-close" @onclick="CerrarDetalle"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-2 mb-3">
                        <div class="col-6"><strong>Fecha:</strong> @_detail!.Fecha.ToString("g")</div>
                        <div class="col-6"><strong>Estado:</strong> @_detail!.Estado</div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>Producto</th>
                                    <th class="text-end">Cant.</th>
                                    <th class="text-end">P.Unit</th>
                                    <th class="text-end">Subtotal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var it in _detail!.Items)
                                {
                                    <tr>
                                        <td>@it.Producto</td>
                                        <td class="text-end">@it.Cantidad</td>
                                        <td class="text-end">@it.PrecioUnit.ToString("C")</td>
                                        <td class="text-end">@it.Subtotal.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="3" class="text-end">Total</th>
                                    <th class="text-end">@_detail!.Total.ToString("C")</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center gap-2">
                    @if (_detail!.Estado == "Pendiente")
                    {
                        <button class="btn btn-sm btn-success"
                                @onclick="() => Aceptar(_detail!.Id)">
                            <i class="bi bi-check2-circle"></i> Aceptar
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => Rechazar(_detail!.Id)">
                            <i class="bi bi-x-circle"></i> Rechazar
                        </button>
                    }
                    <button class="btn btn-sm btn-outline-secondary ms-auto"
                            @onclick="CerrarDetalle">
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    List<PedidoResumenDto> _items = new();
    PedidoDto? _detail;

    string? _estado; 
    bool _loading;
    string? _toast;
    string? _error;

    string EstadoFiltro
    {
        get => _estado ?? string.Empty;
        set
        {
            var nuevo = string.IsNullOrWhiteSpace(value) ? null : value.Trim();
            if (_estado == nuevo) return;
            _estado = nuevo;
            _ = CargarAsync();
        }
    }

    protected override async Task OnInitializedAsync() => await CargarAsync();

    Task Refrescar()
    {
        _estado = null;
        return CargarAsync();
    }

    async Task CargarAsync()
    {
        try
        {
            _loading = true; _error = _toast = null;
            _items = await AdminPedidos.ListAsync(_estado);
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _loading = false; }
    }

    async Task Ver(int id)
    {
        _detail = await AdminPedidos.GetAsync(id);
        StateHasChanged();
    }

    void CerrarDetalle() => _detail = null;

    async Task Aceptar(int id)
    {
        var ok = await AdminPedidos.AceptarAsync(id);
        _toast = ok ? "Pedido aceptado. Stock actualizado." : "No se pudo aceptar (sin stock o conflicto).";
        _detail = null;
        await CargarAsync();
    }

    async Task Rechazar(int id)
    {
        var ok = await AdminPedidos.RechazarAsync(id, "Rechazado por admin");
        _toast = ok ? "Pedido rechazado." : "No se pudo rechazar.";
        _detail = null;
        await CargarAsync();
    }

    string EstadoCss(string estado) => estado switch
    {
        "Pendiente" => "bg-warning text-dark",
        "Aprobado" => "bg-success",
        "Cancelado" => "bg-secondary",
        _ => "bg-light text-dark"
    };
}
