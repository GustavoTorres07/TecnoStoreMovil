@page "/admin/usuarios"

@using TecnoStoreMovil.Services.Contrato
@using TecnoStoreMovil.Shared.DTOs
@using TecnoStoreMovil.Components.Shared  

@inject IUsuariosClient UsuariosClient
@inject ISesionService Sesion
@inject NavigationManager Nav

<div class="container ts-main">
    <div class="d-flex align-items-center mb-3">
        <h3 class="me-auto mb-0"><i class="bi bi-people"></i> Administración · Usuarios</h3>
        <button class="btn btn-primary rounded-pill px-3" @onclick="Nuevo">
            <i class="bi bi-person-plus"></i> Nuevo
        </button>
    </div>

    <div class="row g-2 mb-3">
        <div class="col-12 col-md-6">
            <input class="form-control" placeholder="Buscar por nombre, apellido o email..."
                   @bind="_q" @bind:event="oninput" />
        </div>
        <div class="col-12 col-md-6 text-md-end">
            <button class="btn btn-outline-secondary me-2" @onclick="Refrescar">
                <i class="bi bi-arrow-repeat"></i> Refrescar
            </button>
            <button class="btn btn-outline-primary" @onclick="Buscar">
                <i class="bi bi-search"></i> Buscar
            </button>
        </div>
    </div>

    @if (_loading)
    {
        <div class="d-flex align-items-center gap-2 text-muted">
            <div class="spinner"></div> Cargando usuarios...
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-danger"><i class="bi bi-exclamation-triangle"></i> @_error</div>
    }
    else if (_items.Count == 0)
    {
        <div class="alert alert-warning"><i class="bi bi-info-circle"></i> No se encontraron usuarios.</div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var u in _items)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-start justify-content-between">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-person-circle me-1"></i>
                                    @u.Nombre @u.Apellido
                                </h5>
                                <span class="badge @(u.Activo ? "bg-success" : "bg-secondary")">
                                    @(u.Activo ? "Activo" : "Inactivo")
                                </span>
                            </div>

                            <p class="card-text text-muted mt-2 mb-1">
                                <i class="bi bi-envelope"></i> @u.Email
                            </p>

                            @if (!string.IsNullOrWhiteSpace(u.Telefono))
                            {
                                <p class="card-text text-muted mb-1">
                                    <i class="bi bi-telephone"></i> @u.Telefono
                                </p>
                            }

                            <p class="card-text small text-muted mb-2">
                                <i class="bi bi-calendar-event"></i>
                                Alta: @u.FechaAlta.ToString("dd/MM/yyyy HH:mm")
                            </p>

                            @if (u.Direccion is not null)
                            {
                                <p class="card-text small">
                                    <i class="bi bi-geo"></i>
                                    @u.Direccion.Calle @u.Direccion.Numero, @u.Direccion.Ciudad (@u.Direccion.Provincia)
                                    - @u.Direccion.CodigoPostal, @u.Direccion.Pais
                                </p>
                            }

                            <div class="mt-auto">
                                <div class="mb-2">
                                    <i class="bi bi-award"></i>
                                    <strong>Roles:</strong>
                                    <span class="ms-1">
                                        @if (u.Roles?.Length > 0)
                                        {
                                            @string.Join(", ", u.Roles)
                                        }
                                        else
                                        {
                                            <em class="text-muted">Sin rol</em>
                                        }
                                    </span>
                                </div>

                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => Editar(u.Id)">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmarEliminar(u)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal de confirmación (reusable) -->
<ConfirmationModal
    IsOpen="@(_confirmDelete is not null)"
    Title="Eliminar usuario"
    Body="@($"¿Seguro que deseas eliminar a {_confirmDelete?.Nombre} {_confirmDelete?.Apellido} (ID {_confirmDelete?.Id})? Esta acción no se puede deshacer.")"
    ConfirmText="Sí, eliminar"
    CancelText="Cancelar"
    IsDanger="true"
    Size="sm"
    OnConfirm="EliminarConfirmado"
    OnCancel="CancelarEliminar" />

@code {
    List<UsuarioDto> _items = new();
    bool _loading;
    string? _error;
    string? _q;
    int? _currentUserId;
    UsuarioDto? _confirmDelete;

    protected override async Task OnInitializedAsync()
    {
        _currentUserId = await Sesion.GetUserIdAsync();
        await CargarAsync();
    }

    async Task CargarAsync()
    {
        try
        {
            _error = null;
            _loading = true;

            var data = await UsuariosClient.SearchAsync(_q);

            // Excluir al usuario logueado
            if (_currentUserId.HasValue)
                data = data.Where(x => x.Id != _currentUserId.Value).ToList();

            _items = data
                .OrderBy(x => x.Nombre)
                .ThenBy(x => x.Apellido)
                .ToList();
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar usuarios: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    Task Buscar() => CargarAsync();

    Task Refrescar()
    {
        _q = null;
        return CargarAsync();
    }

    void Nuevo() => Nav.NavigateTo("/admin/usuarios/nuevo");
    void Editar(int id) => Nav.NavigateTo($"/admin/usuarios/editar/{id}");

    void ConfirmarEliminar(UsuarioDto u) => _confirmDelete = u;
    void CancelarEliminar() => _confirmDelete = null;

    async Task EliminarConfirmado()
    {
        if (_confirmDelete is null) return;

        try
        {
            var ok = await UsuariosClient.DeleteAsync(_confirmDelete.Id);
            if (!ok)
            {
                _error = "No se pudo eliminar el usuario.";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error al eliminar: {ex.Message}";
        }
        finally
        {
            _confirmDelete = null;
            await CargarAsync();
        }
    }
}
